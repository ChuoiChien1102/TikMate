//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `swiftgen.yml`.
    static let swiftgenYml = Rswift.FileResource(bundle: R.hostingBundle, name: "swiftgen", pathExtension: "yml")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "swiftgen", withExtension: "yml")`
    static func swiftgenYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftgenYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 42 images.
  struct image {
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `btn_down`.
    static let btn_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_down")
    /// Image `btn_paste`.
    static let btn_paste = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_paste")
    /// Image `ic_arrow_right`.
    static let ic_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right")
    /// Image `ic_buy_coin`.
    static let ic_buy_coin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_buy_coin")
    /// Image `ic_check_list`.
    static let ic_check_list = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_list")
    /// Image `ic_check`.
    static let ic_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check")
    /// Image `ic_checked`.
    static let ic_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checked")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_coin_hightlight`.
    static let ic_coin_hightlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_coin_hightlight")
    /// Image `ic_coin_tabbar`.
    static let ic_coin_tabbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_coin_tabbar")
    /// Image `ic_coin`.
    static let ic_coin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_coin")
    /// Image `ic_delete`.
    static let ic_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete")
    /// Image `ic_download_hightlight`.
    static let ic_download_hightlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_download_hightlight")
    /// Image `ic_download`.
    static let ic_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_download")
    /// Image `ic_feedback`.
    static let ic_feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feedback")
    /// Image `ic_google`.
    static let ic_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_google")
    /// Image `ic_info`.
    static let ic_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_info")
    /// Image `ic_launcher_foreground`.
    static let ic_launcher_foreground = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_launcher_foreground")
    /// Image `ic_launcher_round`.
    static let ic_launcher_round = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_launcher_round")
    /// Image `ic_launcher`.
    static let ic_launcher = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_launcher")
    /// Image `ic_logout`.
    static let ic_logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logout")
    /// Image `ic_menu`.
    static let ic_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu")
    /// Image `ic_more_app`.
    static let ic_more_app = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_app")
    /// Image `ic_more`.
    static let ic_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more")
    /// Image `ic_no_video`.
    static let ic_no_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_no_video")
    /// Image `ic_notification`.
    static let ic_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notification")
    /// Image `ic_pause`.
    static let ic_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pause")
    /// Image `ic_phone`.
    static let ic_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_phone")
    /// Image `ic_rate`.
    static let ic_rate = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_rate")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `ic_share`.
    static let ic_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share")
    /// Image `ic_uncheck`.
    static let ic_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheck")
    /// Image `ic_use`.
    static let ic_use = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_use")
    /// Image `ic_video_hightlight`.
    static let ic_video_hightlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_video_hightlight")
    /// Image `ic_video`.
    static let ic_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_video")
    /// Image `ic_vip`.
    static let ic_vip = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vip")
    /// Image `icon_check_popup`.
    static let icon_check_popup = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_check_popup")
    /// Image `icon_uncheck_popup`.
    static let icon_uncheck_popup = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_uncheck_popup")
    /// Image `img_logo`.
    static let img_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_logo")
    /// Image `tutorial_1`.
    static let tutorial_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial_1")
    /// Image `tutorial_2`.
    static let tutorial_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial_2")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_down", bundle: ..., traitCollection: ...)`
    static func btn_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_paste", bundle: ..., traitCollection: ...)`
    static func btn_paste(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_paste, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_right", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_buy_coin", bundle: ..., traitCollection: ...)`
    static func ic_buy_coin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_buy_coin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check", bundle: ..., traitCollection: ...)`
    static func ic_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check_list", bundle: ..., traitCollection: ...)`
    static func ic_check_list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checked", bundle: ..., traitCollection: ...)`
    static func ic_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_coin", bundle: ..., traitCollection: ...)`
    static func ic_coin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_coin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_coin_hightlight", bundle: ..., traitCollection: ...)`
    static func ic_coin_hightlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_coin_hightlight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_coin_tabbar", bundle: ..., traitCollection: ...)`
    static func ic_coin_tabbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_coin_tabbar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete", bundle: ..., traitCollection: ...)`
    static func ic_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_download", bundle: ..., traitCollection: ...)`
    static func ic_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_download_hightlight", bundle: ..., traitCollection: ...)`
    static func ic_download_hightlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_download_hightlight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_feedback", bundle: ..., traitCollection: ...)`
    static func ic_feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_google", bundle: ..., traitCollection: ...)`
    static func ic_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_info", bundle: ..., traitCollection: ...)`
    static func ic_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_launcher", bundle: ..., traitCollection: ...)`
    static func ic_launcher(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_launcher, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_launcher_foreground", bundle: ..., traitCollection: ...)`
    static func ic_launcher_foreground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_launcher_foreground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_launcher_round", bundle: ..., traitCollection: ...)`
    static func ic_launcher_round(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_launcher_round, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logout", bundle: ..., traitCollection: ...)`
    static func ic_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_menu", bundle: ..., traitCollection: ...)`
    static func ic_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more", bundle: ..., traitCollection: ...)`
    static func ic_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_app", bundle: ..., traitCollection: ...)`
    static func ic_more_app(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_app, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_no_video", bundle: ..., traitCollection: ...)`
    static func ic_no_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_no_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_notification", bundle: ..., traitCollection: ...)`
    static func ic_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pause", bundle: ..., traitCollection: ...)`
    static func ic_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_phone", bundle: ..., traitCollection: ...)`
    static func ic_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_rate", bundle: ..., traitCollection: ...)`
    static func ic_rate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_rate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_share", bundle: ..., traitCollection: ...)`
    static func ic_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_uncheck", bundle: ..., traitCollection: ...)`
    static func ic_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_use", bundle: ..., traitCollection: ...)`
    static func ic_use(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_use, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_video", bundle: ..., traitCollection: ...)`
    static func ic_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_video_hightlight", bundle: ..., traitCollection: ...)`
    static func ic_video_hightlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_video_hightlight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_vip", bundle: ..., traitCollection: ...)`
    static func ic_vip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_check_popup", bundle: ..., traitCollection: ...)`
    static func icon_check_popup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_check_popup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_uncheck_popup", bundle: ..., traitCollection: ...)`
    static func icon_uncheck_popup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_uncheck_popup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_logo", bundle: ..., traitCollection: ...)`
    static func img_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial_1", bundle: ..., traitCollection: ...)`
    static func tutorial_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial_2", bundle: ..., traitCollection: ...)`
    static func tutorial_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial_2, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `CoinMenuTableViewCell`.
    static let coinMenuTableViewCell = _R.nib._CoinMenuTableViewCell()
    /// Nib `MenuTableViewCell`.
    static let menuTableViewCell = _R.nib._MenuTableViewCell()
    /// Nib `ProfileTableViewCell`.
    static let profileTableViewCell = _R.nib._ProfileTableViewCell()
    /// Nib `TabBarView`.
    static let tabBarView = _R.nib._TabBarView()
    /// Nib `VideoCollectionViewCell`.
    static let videoCollectionViewCell = _R.nib._VideoCollectionViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CoinMenuTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coinMenuTableViewCell) instead")
    static func coinMenuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coinMenuTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuTableViewCell) instead")
    static func menuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileTableViewCell) instead")
    static func profileTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TabBarView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tabBarView) instead")
    static func tabBarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tabBarView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoCollectionViewCell) instead")
    static func videoCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoCollectionViewCell)
    }
    #endif

    static func coinMenuTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoinMenuTableViewCell? {
      return R.nib.coinMenuTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoinMenuTableViewCell
    }

    static func menuTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuTableViewCell? {
      return R.nib.menuTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuTableViewCell
    }

    static func profileTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileTableViewCell? {
      return R.nib.profileTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileTableViewCell
    }

    static func tabBarView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.tabBarView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func videoCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoCollectionViewCell? {
      return R.nib.videoCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoCollectionViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CoinMenuTableViewCell`.
    static let coinMenuTableViewCell: Rswift.ReuseIdentifier<CoinMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "CoinMenuTableViewCell")
    /// Reuse identifier `MenuTableViewCell`.
    static let menuTableViewCell: Rswift.ReuseIdentifier<MenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "MenuTableViewCell")
    /// Reuse identifier `ProfileTableViewCell`.
    static let profileTableViewCell: Rswift.ReuseIdentifier<ProfileTableViewCell> = Rswift.ReuseIdentifier(identifier: "ProfileTableViewCell")
    /// Reuse identifier `VideoCollectionViewCell`.
    static let videoCollectionViewCell: Rswift.ReuseIdentifier<VideoCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "VideoCollectionViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 52 localization keys.
    struct localizable {
      /// en translation: (Miễn phí dùng thử 1 ngày)
      ///
      /// Locales: en
      static let freeTrial1Days = Rswift.StringResource(key: "(Free trial 1 days)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: (Miễn phí dùng thử 3 ngày)
      ///
      /// Locales: en
      static let freeTrial3Days = Rswift.StringResource(key: "(Free trial 3 days)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: (Miễn phí dùng thử 5 ngày)
      ///
      /// Locales: en
      static let freeTrial5Days = Rswift.StringResource(key: "(Free trial 5 days)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 100% không quảng cáo
      ///
      /// Locales: en
      static let adsFree = Rswift.StringResource(key: "100% Ads-free", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bạn có muốn đăng xuất?
      ///
      /// Locales: en
      static let doYouWantToLogOut = Rswift.StringResource(key: "Do you want to log out?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bạn không đủ coin để download, hãy:
      ///
      /// Locales: en
      static let youDoNotHaveEnoughCoinsToDownloadPlease = Rswift.StringResource(key: "You do not have enough coins to download, please:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Chia sẻ
      ///
      /// Locales: en
      static let share = Rswift.StringResource(key: "Share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Chính sách riêng tư
      ///
      /// Locales: en
      static let privacyPolicy = Rswift.StringResource(key: "Privacy policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Chúc mừng bạn có 1000 coin mỗi ngày, mở app mỗi ngày để nhận coin nhé
      ///
      /// Locales: en
      static let congratulationsOnHaving1000CoinsPerDayOpenTheAppEveryDayToReceiveCoins = Rswift.StringResource(key: "Congratulations on having 1000 coins per day, open the app every day to receive coins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Chúc mừng!
      ///
      /// Locales: en
      static let congratulation = Rswift.StringResource(key: "Congratulation!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Chọn để tự động download khi mở ứng dụng
      ///
      /// Locales: en
      static let switchAutoDownloadToDownloadVideoImmediatelyWhenOpenApp = Rswift.StringResource(key: "Switch Auto Download to download video immediately when open app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Các app khác
      ///
      /// Locales: en
      static let moreApp = Rswift.StringResource(key: "More app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Có coin ngay lập tức
      ///
      /// Locales: en
      static let getCoinImmediately = Rswift.StringResource(key: "Get coin immediately", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Download lỗi
      ///
      /// Locales: en
      static let downloadError = Rswift.StringResource(key: "Download error!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Download nhiều video cùng lúc
      ///
      /// Locales: en
      static let saveYourTimeByMultipleDownloads = Rswift.StringResource(key: "Save your time by multiple downloads", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Download video không có logo không giới hạn
      ///
      /// Locales: en
      static let downloadUnlimitedVideosWithoutAnyWatermarks = Rswift.StringResource(key: "Download unlimited videos without any watermarks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dán link vào đây nhé
      ///
      /// Locales: en
      static let inputURLHere = Rswift.StringResource(key: "Input URL here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Hoặc
      ///
      /// Locales: en
      static let or = Rswift.StringResource(key: "Or", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Huỷ
      ///
      /// Locales: en
      static let cancle = Rswift.StringResource(key: "Cancle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Hướng dẫn sử dụng
      ///
      /// Locales: en
      static let howToUse = Rswift.StringResource(key: "How to use", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Không có quảng cáo sẵn sàng
      ///
      /// Locales: en
      static let adsWasnTReady = Rswift.StringResource(key: "Ads wasn't ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Không có quảng cáo và download không giới hạn
      ///
      /// Locales: en
      static let adsFreeAndDownloadUnlimitedVideos = Rswift.StringResource(key: "Ads-free and download unlimited videos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Không thể lưu video vào thư viện ảnh
      ///
      /// Locales: en
      static let canNotSaveVideoToCameraRoll = Rswift.StringResource(key: "Can not save video to camera roll !", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Không thể đăng nhập bởi google
      ///
      /// Locales: en
      static let canNotLoginByGoogleAccount = Rswift.StringResource(key: "Can not login by google account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mua VIP
      ///
      /// Locales: en
      static let buyVIP = Rswift.StringResource(key: "Buy VIP", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mua coin
      ///
      /// Locales: en
      static let buyCoin = Rswift.StringResource(key: "Buy coin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mua coin
      ///
      /// Locales: en
      static let buyCoins = Rswift.StringResource(key: "Buy coins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mua thêm coin
      ///
      /// Locales: en
      static let buyMoreCoin = Rswift.StringResource(key: "Buy more coin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mở nơi chứa download ở đâu
      ///
      /// Locales: en
      static let howToOpenDownloadFolder = Rswift.StringResource(key: "How to open download folder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Phản hồi
      ///
      /// Locales: en
      static let feedback = Rswift.StringResource(key: "Feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: THÀNH VIÊN VIP
      ///
      /// Locales: en
      static let gopremiuM = Rswift.StringResource(key: "GO PREMIUM", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Thông báo
      ///
      /// Locales: en
      static let alert = Rswift.StringResource(key: "Alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Thông báo
      ///
      /// Locales: en
      static let confirm = Rswift.StringResource(key: "Confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Thông báo
      ///
      /// Locales: en
      static let warning = Rswift.StringResource(key: "Warning!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tôi đã hiểu, đừng nhắc lại
      ///
      /// Locales: en
      static let iUnderstoodPlsDonTShowItAgain = Rswift.StringResource(key: "I understood, pls don't show it again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tự động Download
      ///
      /// Locales: en
      static let autoDownload = Rswift.StringResource(key: "Auto Download", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: VIP 1 tháng
      ///
      /// Locales: en
      static let vip1Month = Rswift.StringResource(key: "VIP 1 month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: VIP 1 tuần
      ///
      /// Locales: en
      static let vip1Week = Rswift.StringResource(key: "VIP 1 week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: VIP 3 tháng
      ///
      /// Locales: en
      static let vip3Month = Rswift.StringResource(key: "VIP 3 month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Video download của bạn sẽ xuất hiện ở đây. Hãy xem hướng dẫn để download những video không có logo nhé
      ///
      /// Locales: en
      static let yourDownloadVideosWillAppearHerePleaseSeeBellowIntructionToDownloadVideosWithoutAnyWatermask = Rswift.StringResource(key: "Your download videos will appear here. Please see bellow intruction to download videos without any watermask", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Vui lòng nhập link
      ///
      /// Locales: en
      static let pleasePasteUrlLink = Rswift.StringResource(key: "Please paste url link !", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Xem
      ///
      /// Locales: en
      static let seeHere = Rswift.StringResource(key: "See here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Xem video quảng cáo
      ///
      /// Locales: en
      static let watchTheVideoAdvertisement = Rswift.StringResource(key: "Watch the video (advertisement)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Xem video quảng cáo
      ///
      /// Locales: en
      static let watchVideosAds = Rswift.StringResource(key: "Watch videos (Ads)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Xem video vui nhộn và kiếm coin
      ///
      /// Locales: en
      static let watchFunnyVideosAndEarnCoins = Rswift.StringResource(key: "Watch funny videos and earn coins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Đánh giá
      ///
      /// Locales: en
      static let rateThisApp = Rswift.StringResource(key: "Rate this app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Đóng
      ///
      /// Locales: en
      static let close = Rswift.StringResource(key: "Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Đăng nhập Google
      ///
      /// Locales: en
      static let signInWithGoogle = Rswift.StringResource(key: "Sign in with Google", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Đăng nhập lỗi
      ///
      /// Locales: en
      static let loginFailed = Rswift.StringResource(key: "Login failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Đăng nhập điện thoại
      ///
      /// Locales: en
      static let signInWithPhone = Rswift.StringResource(key: "Sign in with phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Đăng xuất
      ///
      /// Locales: en
      static let logOut = Rswift.StringResource(key: "Log out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Đồng ý
      ///
      /// Locales: en
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: (Miễn phí dùng thử 1 ngày)
      ///
      /// Locales: en
      static func freeTrial1Days(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("(Free trial 1 days)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "(Free trial 1 days)"
        }

        return NSLocalizedString("(Free trial 1 days)", bundle: bundle, comment: "")
      }

      /// en translation: (Miễn phí dùng thử 3 ngày)
      ///
      /// Locales: en
      static func freeTrial3Days(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("(Free trial 3 days)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "(Free trial 3 days)"
        }

        return NSLocalizedString("(Free trial 3 days)", bundle: bundle, comment: "")
      }

      /// en translation: (Miễn phí dùng thử 5 ngày)
      ///
      /// Locales: en
      static func freeTrial5Days(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("(Free trial 5 days)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "(Free trial 5 days)"
        }

        return NSLocalizedString("(Free trial 5 days)", bundle: bundle, comment: "")
      }

      /// en translation: 100% không quảng cáo
      ///
      /// Locales: en
      static func adsFree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("100% Ads-free", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "100% Ads-free"
        }

        return NSLocalizedString("100% Ads-free", bundle: bundle, comment: "")
      }

      /// en translation: Bạn có muốn đăng xuất?
      ///
      /// Locales: en
      static func doYouWantToLogOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Do you want to log out?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Do you want to log out?"
        }

        return NSLocalizedString("Do you want to log out?", bundle: bundle, comment: "")
      }

      /// en translation: Bạn không đủ coin để download, hãy:
      ///
      /// Locales: en
      static func youDoNotHaveEnoughCoinsToDownloadPlease(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You do not have enough coins to download, please:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You do not have enough coins to download, please:"
        }

        return NSLocalizedString("You do not have enough coins to download, please:", bundle: bundle, comment: "")
      }

      /// en translation: Chia sẻ
      ///
      /// Locales: en
      static func share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share"
        }

        return NSLocalizedString("Share", bundle: bundle, comment: "")
      }

      /// en translation: Chính sách riêng tư
      ///
      /// Locales: en
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy policy"
        }

        return NSLocalizedString("Privacy policy", bundle: bundle, comment: "")
      }

      /// en translation: Chúc mừng bạn có 1000 coin mỗi ngày, mở app mỗi ngày để nhận coin nhé
      ///
      /// Locales: en
      static func congratulationsOnHaving1000CoinsPerDayOpenTheAppEveryDayToReceiveCoins(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Congratulations on having 1000 coins per day, open the app every day to receive coins", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Congratulations on having 1000 coins per day, open the app every day to receive coins"
        }

        return NSLocalizedString("Congratulations on having 1000 coins per day, open the app every day to receive coins", bundle: bundle, comment: "")
      }

      /// en translation: Chúc mừng!
      ///
      /// Locales: en
      static func congratulation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Congratulation!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Congratulation!"
        }

        return NSLocalizedString("Congratulation!", bundle: bundle, comment: "")
      }

      /// en translation: Chọn để tự động download khi mở ứng dụng
      ///
      /// Locales: en
      static func switchAutoDownloadToDownloadVideoImmediatelyWhenOpenApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Switch Auto Download to download video immediately when open app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Switch Auto Download to download video immediately when open app"
        }

        return NSLocalizedString("Switch Auto Download to download video immediately when open app", bundle: bundle, comment: "")
      }

      /// en translation: Các app khác
      ///
      /// Locales: en
      static func moreApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("More app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "More app"
        }

        return NSLocalizedString("More app", bundle: bundle, comment: "")
      }

      /// en translation: Có coin ngay lập tức
      ///
      /// Locales: en
      static func getCoinImmediately(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Get coin immediately", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Get coin immediately"
        }

        return NSLocalizedString("Get coin immediately", bundle: bundle, comment: "")
      }

      /// en translation: Download lỗi
      ///
      /// Locales: en
      static func downloadError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Download error!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Download error!"
        }

        return NSLocalizedString("Download error!", bundle: bundle, comment: "")
      }

      /// en translation: Download nhiều video cùng lúc
      ///
      /// Locales: en
      static func saveYourTimeByMultipleDownloads(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save your time by multiple downloads", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save your time by multiple downloads"
        }

        return NSLocalizedString("Save your time by multiple downloads", bundle: bundle, comment: "")
      }

      /// en translation: Download video không có logo không giới hạn
      ///
      /// Locales: en
      static func downloadUnlimitedVideosWithoutAnyWatermarks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Download unlimited videos without any watermarks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Download unlimited videos without any watermarks"
        }

        return NSLocalizedString("Download unlimited videos without any watermarks", bundle: bundle, comment: "")
      }

      /// en translation: Dán link vào đây nhé
      ///
      /// Locales: en
      static func inputURLHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Input URL here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Input URL here"
        }

        return NSLocalizedString("Input URL here", bundle: bundle, comment: "")
      }

      /// en translation: Hoặc
      ///
      /// Locales: en
      static func or(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Or", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Or"
        }

        return NSLocalizedString("Or", bundle: bundle, comment: "")
      }

      /// en translation: Huỷ
      ///
      /// Locales: en
      static func cancle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancle"
        }

        return NSLocalizedString("Cancle", bundle: bundle, comment: "")
      }

      /// en translation: Hướng dẫn sử dụng
      ///
      /// Locales: en
      static func howToUse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("How to use", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "How to use"
        }

        return NSLocalizedString("How to use", bundle: bundle, comment: "")
      }

      /// en translation: Không có quảng cáo sẵn sàng
      ///
      /// Locales: en
      static func adsWasnTReady(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ads wasn't ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ads wasn't ready"
        }

        return NSLocalizedString("Ads wasn't ready", bundle: bundle, comment: "")
      }

      /// en translation: Không có quảng cáo và download không giới hạn
      ///
      /// Locales: en
      static func adsFreeAndDownloadUnlimitedVideos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ads-free and download unlimited videos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ads-free and download unlimited videos"
        }

        return NSLocalizedString("Ads-free and download unlimited videos", bundle: bundle, comment: "")
      }

      /// en translation: Không thể lưu video vào thư viện ảnh
      ///
      /// Locales: en
      static func canNotSaveVideoToCameraRoll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Can not save video to camera roll !", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Can not save video to camera roll !"
        }

        return NSLocalizedString("Can not save video to camera roll !", bundle: bundle, comment: "")
      }

      /// en translation: Không thể đăng nhập bởi google
      ///
      /// Locales: en
      static func canNotLoginByGoogleAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Can not login by google account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Can not login by google account"
        }

        return NSLocalizedString("Can not login by google account", bundle: bundle, comment: "")
      }

      /// en translation: Mua VIP
      ///
      /// Locales: en
      static func buyVIP(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Buy VIP", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Buy VIP"
        }

        return NSLocalizedString("Buy VIP", bundle: bundle, comment: "")
      }

      /// en translation: Mua coin
      ///
      /// Locales: en
      static func buyCoin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Buy coin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Buy coin"
        }

        return NSLocalizedString("Buy coin", bundle: bundle, comment: "")
      }

      /// en translation: Mua coin
      ///
      /// Locales: en
      static func buyCoins(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Buy coins", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Buy coins"
        }

        return NSLocalizedString("Buy coins", bundle: bundle, comment: "")
      }

      /// en translation: Mua thêm coin
      ///
      /// Locales: en
      static func buyMoreCoin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Buy more coin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Buy more coin"
        }

        return NSLocalizedString("Buy more coin", bundle: bundle, comment: "")
      }

      /// en translation: Mở nơi chứa download ở đâu
      ///
      /// Locales: en
      static func howToOpenDownloadFolder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("How to open download folder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "How to open download folder"
        }

        return NSLocalizedString("How to open download folder", bundle: bundle, comment: "")
      }

      /// en translation: Phản hồi
      ///
      /// Locales: en
      static func feedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Feedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Feedback"
        }

        return NSLocalizedString("Feedback", bundle: bundle, comment: "")
      }

      /// en translation: THÀNH VIÊN VIP
      ///
      /// Locales: en
      static func gopremiuM(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GO PREMIUM", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GO PREMIUM"
        }

        return NSLocalizedString("GO PREMIUM", bundle: bundle, comment: "")
      }

      /// en translation: Thông báo
      ///
      /// Locales: en
      static func alert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert"
        }

        return NSLocalizedString("Alert", bundle: bundle, comment: "")
      }

      /// en translation: Thông báo
      ///
      /// Locales: en
      static func confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm"
        }

        return NSLocalizedString("Confirm", bundle: bundle, comment: "")
      }

      /// en translation: Thông báo
      ///
      /// Locales: en
      static func warning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Warning!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Warning!"
        }

        return NSLocalizedString("Warning!", bundle: bundle, comment: "")
      }

      /// en translation: Tôi đã hiểu, đừng nhắc lại
      ///
      /// Locales: en
      static func iUnderstoodPlsDonTShowItAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I understood, pls don't show it again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "I understood, pls don't show it again"
        }

        return NSLocalizedString("I understood, pls don't show it again", bundle: bundle, comment: "")
      }

      /// en translation: Tự động Download
      ///
      /// Locales: en
      static func autoDownload(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auto Download", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auto Download"
        }

        return NSLocalizedString("Auto Download", bundle: bundle, comment: "")
      }

      /// en translation: VIP 1 tháng
      ///
      /// Locales: en
      static func vip1Month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VIP 1 month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "VIP 1 month"
        }

        return NSLocalizedString("VIP 1 month", bundle: bundle, comment: "")
      }

      /// en translation: VIP 1 tuần
      ///
      /// Locales: en
      static func vip1Week(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VIP 1 week", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "VIP 1 week"
        }

        return NSLocalizedString("VIP 1 week", bundle: bundle, comment: "")
      }

      /// en translation: VIP 3 tháng
      ///
      /// Locales: en
      static func vip3Month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VIP 3 month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "VIP 3 month"
        }

        return NSLocalizedString("VIP 3 month", bundle: bundle, comment: "")
      }

      /// en translation: Video download của bạn sẽ xuất hiện ở đây. Hãy xem hướng dẫn để download những video không có logo nhé
      ///
      /// Locales: en
      static func yourDownloadVideosWillAppearHerePleaseSeeBellowIntructionToDownloadVideosWithoutAnyWatermask(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your download videos will appear here. Please see bellow intruction to download videos without any watermask", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your download videos will appear here. Please see bellow intruction to download videos without any watermask"
        }

        return NSLocalizedString("Your download videos will appear here. Please see bellow intruction to download videos without any watermask", bundle: bundle, comment: "")
      }

      /// en translation: Vui lòng nhập link
      ///
      /// Locales: en
      static func pleasePasteUrlLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please paste url link !", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please paste url link !"
        }

        return NSLocalizedString("Please paste url link !", bundle: bundle, comment: "")
      }

      /// en translation: Xem
      ///
      /// Locales: en
      static func seeHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("See here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "See here"
        }

        return NSLocalizedString("See here", bundle: bundle, comment: "")
      }

      /// en translation: Xem video quảng cáo
      ///
      /// Locales: en
      static func watchTheVideoAdvertisement(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Watch the video (advertisement)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Watch the video (advertisement)"
        }

        return NSLocalizedString("Watch the video (advertisement)", bundle: bundle, comment: "")
      }

      /// en translation: Xem video quảng cáo
      ///
      /// Locales: en
      static func watchVideosAds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Watch videos (Ads)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Watch videos (Ads)"
        }

        return NSLocalizedString("Watch videos (Ads)", bundle: bundle, comment: "")
      }

      /// en translation: Xem video vui nhộn và kiếm coin
      ///
      /// Locales: en
      static func watchFunnyVideosAndEarnCoins(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Watch funny videos and earn coins", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Watch funny videos and earn coins"
        }

        return NSLocalizedString("Watch funny videos and earn coins", bundle: bundle, comment: "")
      }

      /// en translation: Đánh giá
      ///
      /// Locales: en
      static func rateThisApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rate this app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rate this app"
        }

        return NSLocalizedString("Rate this app", bundle: bundle, comment: "")
      }

      /// en translation: Đóng
      ///
      /// Locales: en
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Close"
        }

        return NSLocalizedString("Close", bundle: bundle, comment: "")
      }

      /// en translation: Đăng nhập Google
      ///
      /// Locales: en
      static func signInWithGoogle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign in with Google", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign in with Google"
        }

        return NSLocalizedString("Sign in with Google", bundle: bundle, comment: "")
      }

      /// en translation: Đăng nhập lỗi
      ///
      /// Locales: en
      static func loginFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login failed"
        }

        return NSLocalizedString("Login failed", bundle: bundle, comment: "")
      }

      /// en translation: Đăng nhập điện thoại
      ///
      /// Locales: en
      static func signInWithPhone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign in with phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign in with phone"
        }

        return NSLocalizedString("Sign in with phone", bundle: bundle, comment: "")
      }

      /// en translation: Đăng xuất
      ///
      /// Locales: en
      static func logOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Log out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Log out"
        }

        return NSLocalizedString("Log out", bundle: bundle, comment: "")
      }

      /// en translation: Đồng ý
      ///
      /// Locales: en
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CoinMenuTableViewCell.validate()
      try _ProfileTableViewCell.validate()
      try _TabBarView.validate()
      try _VideoCollectionViewCell.validate()
    }

    struct _CoinMenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CoinMenuTableViewCell

      let bundle = R.hostingBundle
      let identifier = "CoinMenuTableViewCell"
      let name = "CoinMenuTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoinMenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoinMenuTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_arrow_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right' is used in nib 'CoinMenuTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuTableViewCell

      let bundle = R.hostingBundle
      let identifier = "MenuTableViewCell"
      let name = "MenuTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuTableViewCell
      }

      fileprivate init() {}
    }

    struct _ProfileTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ProfileTableViewCell"
      let name = "ProfileTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo' is used in nib 'ProfileTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TabBarView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TabBarView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_coin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_coin' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_coin_hightlight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_coin_hightlight' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_download", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_download' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_download_hightlight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_download_hightlight' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_video' is used in nib 'TabBarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_video_hightlight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_video_hightlight' is used in nib 'TabBarView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VideoCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VideoCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "VideoCollectionViewCell"
      let name = "VideoCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_more' is used in nib 'VideoCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pause", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pause' is used in nib 'VideoCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController

      let bundle = R.hostingBundle
      let buyCoinViewController = StoryboardViewControllerResource<BuyCoinViewController>(identifier: "BuyCoinViewController")
      let buyVipViewController = StoryboardViewControllerResource<BuyVipViewController>(identifier: "BuyVipViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let menuViewController = StoryboardViewControllerResource<MenuViewController>(identifier: "MenuViewController")
      let name = "Main"
      let popupDonateViewController = StoryboardViewControllerResource<PopupDonateViewController>(identifier: "PopupDonateViewController")
      let popupWarningViewController = StoryboardViewControllerResource<PopupWarningViewController>(identifier: "PopupWarningViewController")
      let splashViewController = StoryboardViewControllerResource<SplashViewController>(identifier: "SplashViewController")
      let tabCoinViewController = StoryboardViewControllerResource<TabCoinViewController>(identifier: "TabCoinViewController")
      let tabDownloadViewController = StoryboardViewControllerResource<TabDownloadViewController>(identifier: "TabDownloadViewController")
      let tabVideoTutorialViewController = StoryboardViewControllerResource<TabVideoTutorialViewController>(identifier: "TabVideoTutorialViewController")
      let tabVideoViewController = StoryboardViewControllerResource<TabVideoViewController>(identifier: "TabVideoViewController")
      let tutorialViewController = StoryboardViewControllerResource<TutorialViewController>(identifier: "TutorialViewController")

      func buyCoinViewController(_: Void = ()) -> BuyCoinViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: buyCoinViewController)
      }

      func buyVipViewController(_: Void = ()) -> BuyVipViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: buyVipViewController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func menuViewController(_: Void = ()) -> MenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuViewController)
      }

      func popupDonateViewController(_: Void = ()) -> PopupDonateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popupDonateViewController)
      }

      func popupWarningViewController(_: Void = ()) -> PopupWarningViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popupWarningViewController)
      }

      func splashViewController(_: Void = ()) -> SplashViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashViewController)
      }

      func tabCoinViewController(_: Void = ()) -> TabCoinViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabCoinViewController)
      }

      func tabDownloadViewController(_: Void = ()) -> TabDownloadViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabDownloadViewController)
      }

      func tabVideoTutorialViewController(_: Void = ()) -> TabVideoTutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabVideoTutorialViewController)
      }

      func tabVideoViewController(_: Void = ()) -> TabVideoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabVideoViewController)
      }

      func tutorialViewController(_: Void = ()) -> TutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorialViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_paste", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_paste' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checked' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_coin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_coin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_google' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_no_video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_no_video' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_uncheck' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_vip", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_vip' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tutorial_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tutorial_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().buyCoinViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'buyCoinViewController' could not be loaded from storyboard 'Main' as 'BuyCoinViewController'.") }
        if _R.storyboard.main().buyVipViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'buyVipViewController' could not be loaded from storyboard 'Main' as 'BuyVipViewController'.") }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().menuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuViewController' could not be loaded from storyboard 'Main' as 'MenuViewController'.") }
        if _R.storyboard.main().popupDonateViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popupDonateViewController' could not be loaded from storyboard 'Main' as 'PopupDonateViewController'.") }
        if _R.storyboard.main().popupWarningViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popupWarningViewController' could not be loaded from storyboard 'Main' as 'PopupWarningViewController'.") }
        if _R.storyboard.main().splashViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashViewController' could not be loaded from storyboard 'Main' as 'SplashViewController'.") }
        if _R.storyboard.main().tabCoinViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabCoinViewController' could not be loaded from storyboard 'Main' as 'TabCoinViewController'.") }
        if _R.storyboard.main().tabDownloadViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabDownloadViewController' could not be loaded from storyboard 'Main' as 'TabDownloadViewController'.") }
        if _R.storyboard.main().tabVideoTutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabVideoTutorialViewController' could not be loaded from storyboard 'Main' as 'TabVideoTutorialViewController'.") }
        if _R.storyboard.main().tabVideoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabVideoViewController' could not be loaded from storyboard 'Main' as 'TabVideoViewController'.") }
        if _R.storyboard.main().tutorialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorialViewController' could not be loaded from storyboard 'Main' as 'TutorialViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
